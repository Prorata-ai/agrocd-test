name: Deploy with Parameters

on:
  workflow_dispatch: 
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - Build and Deploy/Restart
          - Build image only
          - Deploy Configmap/Restart
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Development
          - Lab Environment
          - Staging
          - Production
jobs:

  build-and-push:
    outputs:
      VERSION_TAG: ${{ steps.docker_build.outputs.VERSION_TAG }}
    if: ${{ github.event.inputs.action == 'Build and Deploy/Restart' || github.event.inputs.action == 'Build image only' }}
    runs-on: ubuntu-latest
    # Load selected environment from Github based on given input
    environment: ${{ (github.event.inputs.environment == 'Development' && 'Development-Environment') || 
                     (github.event.inputs.environment == 'Lab Environment' && 'Lab-Environment') || 
                     (github.event.inputs.environment == 'Production' && 'Production-Environment') || 
                     (github.event.inputs.environment == 'Staging' && 'Staging-Environment') }}

    steps:
      
      - name: Exit if Deploying to Production but user is not a member of DevOps team
        if: github.event.inputs.environment == 'Production' && needs.check-devops-membership.outputs.is_devops_member == 'false'
        run: |
          echo "Deploying to Production but user is not a member of DevOps team"
          exit 1  


      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ vars.ACR_LOGIN_SERVER }}
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Getting GIT vars
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV" 
          
      - name: Build and push Docker image
        id: docker_build
        env:
          VERSION_TAG: "${{ vars.IMAGE_VERSION }}-${{ env.branch }}-${{ env.sha_short }}"
          # GH_PR_READ_TOKEN: ${{ secrets.GH_PR_READ_TOKEN }}
        run: |
          cd james/
          docker compose -f docker-compose.yaml build 
          docker tag ${{ vars.IMAGE_NAME }} "${{ vars.ACR_LOGIN_SERVER }}/${{ vars.IMAGE_NAME }}:${{ env.VERSION_TAG }}"
          docker tag ${{ vars.IMAGE_NAME }} ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.IMAGE_NAME }}:latest

          docker push "${{ vars.ACR_LOGIN_SERVER }}/${{ vars.IMAGE_NAME }}:${{ env.VERSION_TAG }}"
          docker push ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.IMAGE_NAME }}:latest

          # BUILD OUTPUT
          echo "VERSION_TAG=${{ env.VERSION_TAG }}" >> $GITHUB_OUTPUT

  commit:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure Git
        run: |
          git config --global user.name 'Prashant'
          git config --global user.email 'prashant@prorata.ai'

      - name: Replace text in deployment.yaml
        env:
          GH_PR_READ_TOKEN: ${{ secrets.GH_PR_READ_TOKEN }}
        run: |
          cd james/
          sed -i '' 's|image:.*|image: prtdevelopmentacr.azurecr.io/test-gist-analytics-dashboard:${{ env.VERSION_TAG }}|' /james/deployment.yaml
          git add deployment.yaml
          git commit -m "Replace text in deployment.yaml"
          git remote add target https://x-access-token:${{ env.GH_PR_READ_TOKEN }}@github.com/Prorata-ai/agrocd-test.git
          git push target main

